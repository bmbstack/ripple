// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fixtures/forum/proto/student.proto

// @RippleRpc
// @NacosGroup DEFAULT_GROUP
// @NacosCluster ripple

package proto

import (
	context "context"
	errors "errors"
	fmt "fmt"
	ripple "github.com/bmbstack/ripple"
	helper "github.com/bmbstack/ripple/helper"
	constant "github.com/bmbstack/ripple/nacos/nacos-sdk-go/v2/common/constant"
	client1 "github.com/bmbstack/ripple/nacos/rpcxnacos/client"
	proto "github.com/golang/protobuf/proto"
	client "github.com/smallnest/rpcx/client"
	protocol "github.com/smallnest/rpcx/protocol"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LearnReq struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LearnReq) Reset()         { *m = LearnReq{} }
func (m *LearnReq) String() string { return proto.CompactTextString(m) }
func (*LearnReq) ProtoMessage()    {}
func (*LearnReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a63a0c0de64b8ab, []int{0}
}
func (m *LearnReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LearnReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LearnReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LearnReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LearnReq.Merge(m, src)
}
func (m *LearnReq) XXX_Size() int {
	return m.Size()
}
func (m *LearnReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LearnReq.DiscardUnknown(m)
}

var xxx_messageInfo_LearnReq proto.InternalMessageInfo

func (m *LearnReq) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type LearnReply struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LearnReply) Reset()         { *m = LearnReply{} }
func (m *LearnReply) String() string { return proto.CompactTextString(m) }
func (*LearnReply) ProtoMessage()    {}
func (*LearnReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a63a0c0de64b8ab, []int{1}
}
func (m *LearnReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LearnReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LearnReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LearnReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LearnReply.Merge(m, src)
}
func (m *LearnReply) XXX_Size() int {
	return m.Size()
}
func (m *LearnReply) XXX_DiscardUnknown() {
	xxx_messageInfo_LearnReply.DiscardUnknown(m)
}

var xxx_messageInfo_LearnReply proto.InternalMessageInfo

func (m *LearnReply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*LearnReq)(nil), "proto.LearnReq")
	proto.RegisterType((*LearnReply)(nil), "proto.LearnReply")
}

func init() {
	proto.RegisterFile("fixtures/forum/proto/student.proto", fileDescriptor_7a63a0c0de64b8ab)
}

var fileDescriptor_7a63a0c0de64b8ab = []byte{
	// 164 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4a, 0xcb, 0xac, 0x28,
	0x29, 0x2d, 0x4a, 0x2d, 0xd6, 0x4f, 0xcb, 0x2f, 0x2a, 0xcd, 0xd5, 0x2f, 0x28, 0xca, 0x2f, 0xc9,
	0xd7, 0x2f, 0x2e, 0x29, 0x4d, 0x49, 0xcd, 0x2b, 0xd1, 0x03, 0xf3, 0x84, 0x58, 0xc1, 0x94, 0x92,
	0x14, 0x17, 0x87, 0x4f, 0x6a, 0x62, 0x51, 0x5e, 0x50, 0x6a, 0xa1, 0x10, 0x1f, 0x17, 0x53, 0x66,
	0x8a, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x4b, 0x10, 0x53, 0x66, 0x8a, 0x92, 0x02, 0x17, 0x17, 0x54,
	0xae, 0x20, 0xa7, 0x52, 0x48, 0x88, 0x8b, 0x25, 0x2f, 0x31, 0x37, 0x15, 0x2c, 0xcf, 0x19, 0x04,
	0x66, 0x1b, 0x59, 0x70, 0xb1, 0x07, 0x43, 0x4c, 0x15, 0xd2, 0xe5, 0x62, 0x05, 0x2b, 0x16, 0xe2,
	0x87, 0x58, 0xa0, 0x07, 0x33, 0x56, 0x4a, 0x10, 0x55, 0xa0, 0x20, 0xa7, 0x52, 0x89, 0xc1, 0x49,
	0xe0, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf1, 0x58,
	0x8e, 0x21, 0x89, 0x0d, 0xac, 0xca, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x42, 0x14, 0x34, 0x0f,
	0xbd, 0x00, 0x00, 0x00,
}

func (m *LearnReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LearnReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LearnReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Id != 0 {
		i = encodeVarintStudent(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LearnReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LearnReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LearnReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintStudent(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStudent(dAtA []byte, offset int, v uint64) int {
	offset -= sovStudent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

// This following code was generated by ripple
// Gernerated from fixtures/forum/proto/student.proto

const ServiceNameOfStudent = "StudentRpc"

// ================== interface ===================
type StudentInterface interface {

	// StudentInterface can be used for interface verification.
	// Learn is server rpc method as defined
	Learn(ctx context.Context, req *LearnReq, reply *LearnReply) (err error)
}

// ================== server implement demo ===================
// ripple.Default().RegisterRpc("User", &UserRpcDemo{}, "")
type StudentRpcDemo struct{}

func (this *StudentRpcDemo) Learn(ctx context.Context, req *LearnReq, reply *LearnReply) (err error) {
	// TODO: add business logics
	*reply = LearnReply{}
	return nil
}

// ================== client stub ===================
// newXClientForStudent creates a XClient.
// You can configure this client pool with more options such as etcd registry, serialize type, select algorithm and fail mode.
func newXClientPoolForStudent() (*client.XClientPool, error) {
	config := ripple.GetBaseConfig()
	if helper.IsEmpty(config.Nacos) {
		return nil, errors.New("yaml nacos config is null")
	}
	clientConfig := constant.ClientConfig{
		TimeoutMs:            10 * 1000,
		ListenInterval:       30 * 1000,
		BeatInterval:         5 * 1000,
		NamespaceId:          config.Nacos.NamespaceId,
		CacheDir:             config.Nacos.CacheDir,
		LogDir:               config.Nacos.LogDir,
		UpdateThreadNum:      20,
		NotLoadCacheAtStart:  true,
		UpdateCacheWhenEmpty: true,
	}

	serverConfig := []constant.ServerConfig{{
		IpAddr: config.Nacos.Host,
		Port:   config.Nacos.Port,
	}}

	d, err := client1.NewNacosDiscovery(ServiceNameOfStudent, "ripple", "DEFAULT_GROUP", clientConfig, serverConfig)
	if err != nil {
		return nil, err
	}

	opt := client.DefaultOption
	opt.SerializeType = protocol.ProtoBuffer

	var failMode client.FailMode
	switch config.Nacos.FailMode {
	case "failover":
		failMode = client.Failover
	case "failfast":
		failMode = client.Failfast
	case "failbackup":
		failMode = client.Failbackup
	default:
		failMode = client.Failover
	}

	var selectMode client.SelectMode
	switch config.Nacos.SelectMode {
	case "randomSelect":
		selectMode = client.RandomSelect
	case "weightedRoundRobin":
		selectMode = client.WeightedRoundRobin
	case "weightedICMP":
		selectMode = client.WeightedICMP
	case "consistentHash":
		selectMode = client.ConsistentHash
	case "closest":
		selectMode = client.Closest
	case "selectByUser":
		selectMode = client.SelectByUser
	default:
		selectMode = client.RoundRobin
	}
	poolSize := config.Nacos.ClientPoolSize
	if poolSize == 0 {
		poolSize = 10
	}
	pool := client.NewXClientPool(poolSize, ServiceNameOfStudent, failMode, selectMode, d, opt)

	return pool, nil
}

// Student is a client wrapped XClient.
type StudentClient struct {
	XClientPool *client.XClientPool
	Plugins     client.PluginContainer
}

type StudentClientOption struct {
	Plugins client.PluginContainer
}

// WithPluginsForStudentClient 设置插件
func WithPluginsForStudentClient(plugins client.PluginContainer) func(*StudentClientOption) {
	return func(opt *StudentClientOption) {
		opt.Plugins = plugins
	}
}

// NewStudentClient wraps a XClient as StudentClient.
// You can pass a shared XClient object created by NewXClientForStudent.
func NewStudentClient(options ...func(*StudentClientOption)) *StudentClient {
	pool, err := newXClientPoolForStudent()
	if err != nil {
		fmt.Println(fmt.Sprintf("Create rpcx client err: ripple", err.Error()))
		return &StudentClient{}
	}
	opt := &StudentClientOption{}
	for _, option := range options {
		option(opt)
	}
	return &StudentClient{XClientPool: pool, Plugins: opt.Plugins}
}

// Learn is client rpc method as defined
func (c *StudentClient) Learn(ctx context.Context, req *LearnReq) (reply *LearnReply, err error) {
	reply = &LearnReply{}

	if c.XClientPool == nil {
		return nil, errors.New("rpcx client pool is nil")
	}

	xcli := c.XClientPool.Get()

	c.Plugins.DoPreCall(ctx, "StudentRpc", "Learn", req)
	err = xcli.Call(ctx, "Learn", req, reply)
	c.Plugins.DoPostCall(ctx, "StudentRpc", "Learn", req, reply, err)
	return reply, err
}

// ======================================================
func (m *LearnReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovStudent(uint64(m.Id))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LearnReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStudent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovStudent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStudent(x uint64) (n int) {
	return sovStudent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LearnReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LearnReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LearnReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LearnReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LearnReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LearnReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStudent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStudent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStudent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStudent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStudent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStudent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStudent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStudent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStudent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStudent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStudent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStudent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStudent = fmt.Errorf("proto: unexpected end of group")
)
